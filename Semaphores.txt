Here is a pseudo-code implementation of producer-consumer problem using semaphores

#define N 100 /* Number of slots in the buffer */
typedef int semaphore /* semaphore are a special kind of int */
semaphore mutex = 1; /* controls access to critical region */
semaphore empty = N; /* counts empty buffer slots */
semaphore full = 0; /* counts full buffer slots */

void producer(void)
{
  int item;
  while(TRUE) {
    item = produce_item();  /* Generate something to put in buffer */
    down(&empty);           /* decrement empty count */
    down(&mutex);           /* enter the critical region */
    insert_item(item);      /* put new item in the buffer */
    up(&mutex);             /* exit the critical region */
    up(&full);               /* Increment count of full slots */
  }
}


void consumer(void)
{
  int item;
  while(TRUE) {
    down(&full);        /* decrement full count */
    down(&mutex);       /* enter critical region */
    item = remove_item(); /* take item from the buffer */
    up(&mutex);         /*leave critical region */
    up(&empty);        /* increment count of empty slots */
    consume_item(item);  /* do something with the item */
  }
}
